{"/home/travis/build/npmtest/node-npmtest-ember-light-table/test.js":"/* istanbul instrument in package npmtest_ember_light_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/lib.npmtest_ember_light_table.js":"/* istanbul instrument in package npmtest_ember_light_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_light_table = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_light_table = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-light-table && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_light_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_light_table\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_light_table.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_light_table.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_light_table.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_light_table.__dirname + '/lib.npmtest_ember_light_table.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-light-table'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/config/changelog.js":"// jshint node:true\n\n// For details on each option run `ember help release`\nmodule.exports = {\n\n  // angular style guide: https://github.com/angular/angular.js/blob/v1.4.8/CONTRIBUTING.md#commit\n  // jquery style guide: https://contribute.jquery.org/commits-and-pull-requests/#commit-guidelines\n  // ember style guide: https://github.com/emberjs/ember.js/blob/master/CONTRIBUTING.md#commit-tagging\n  style: 'angular', // 'ember' 'jquery'\n\n  head: 'master',\n  base: '-last', // a branch or tag name, `-last` defaults to the version in package.json\n\n  hooks: {\n    /*\n     parser: function(commit) { return commit; }\n     filter: function(commit) { return true; },\n     groupSort: function(commits) { return { commits: commits }; },\n     format: function(commit) { return commit.title; },\n     */\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/config/release.js":"/* jshint node:true */\n/* var RSVP = require('rsvp'); */\nvar execSync = require('child_process').execSync;\nvar generateChangelog = require('ember-cli-changelog/lib/tasks/release-with-changelog');\n\nmodule.exports = {\n  publish: true,\n  beforeCommit: generateChangelog,\n  afterPublish: function(project, versions) {\n    // Publish dummy app with docs to gh-pages\n    runCommand('ember github-pages:commit --message \"Released ' + versions.next + '\"');\n    runCommand('git push origin gh-pages:gh-pages');\n  }\n};\n\nfunction runCommand(command) {\n  console.log('running: ' + command);\n  var output = execSync(command, { encoding: 'utf8' });\n  console.log(output);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/classes/Column.js":"import Ember from 'ember';\n\nconst {\n  guidFor,\n  isEmpty,\n  makeArray,\n  computed,\n  A: emberArray\n} = Ember;\n\n/**\n * @module Table\n * @class Column\n */\nexport default class Column extends Ember.Object.extend({\n  /**\n   * Whether the column can be hidden.\n   *\n   * CSS Classes:\n   *  - `is-hideable`\n   *\n   * @property hideable\n   * @type {Boolean}\n   * @default true\n   */\n  hideable: true,\n\n  /**\n   * Whether the column can is hidden.\n   *\n   * CSS Classes:\n   *  - `is-hidden`\n   *\n   * @property hidden\n   * @type {Boolean}\n   * @default false\n   */\n  hidden: false,\n\n  /**\n   * If true, this column has been hidden due to the responsive behavior\n   *\n   * @property responsiveHidden\n   * @type {Boolean}\n   * @default false\n   */\n  responsiveHidden: false,\n\n  /**\n   * @property ascending\n   * @type {Boolean}\n   * @default true\n   */\n  ascending: true,\n\n  /**\n   * Whether the column can be sorted.\n   *\n   * CSS Classes:\n   *  - `is-sortable`\n   *\n   * @property sortable\n   * @type {Boolean}\n   * @default true\n   */\n  sortable: true,\n\n  /**\n   * Whether the column can be resized.\n   *\n   * CSS Classes:\n   *  - `is-resizable`\n   *  - `is-resizing`\n   *\n   * @property resizable\n   * @type {Boolean}\n   * @default false\n   */\n  resizable: false,\n\n  /**\n   * Whether the column can be reorder via drag and drop.\n   *\n   * CSS Classes:\n   *  - `is-draggable`\n   *  - `is-dragging`\n   *  - `is-drag-target`\n   *    - `drag-left`\n   *    - `drag-right`\n   *\n   * @property draggable\n   * @type {Boolean}\n   * @default false\n   */\n  draggable: false,\n\n  /**\n   * Whether the column is a valid drop target.\n   *\n   * @property droppable\n   * @type {Boolean}\n   * @default true\n   */\n  droppable: true,\n\n  /**\n   * Whether the column is sorted.\n   *\n   * CSS Classes:\n   *  - `is-sorted`\n   *\n   * @property sorted\n   * @type {Boolean}\n   * @default false\n   */\n  sorted: false,\n\n  /**\n   * Column header label\n   * @property label\n   * @type {String}\n   * @default ''\n   */\n  label: '',\n\n  /**\n   * Text alignment. Possible values are ['left', 'right', 'center']\n   * @property align\n   * @type {String}\n   * @default 'left'\n   */\n  align: 'left',\n\n  /**\n   * The minimum width (in px) that this column can be resized to.\n   * @property minResizeWidth\n   * @type {Number}\n   * @default 0\n   */\n  minResizeWidth: 0,\n\n  /**\n   * The parent column (or group) for this sub-column.\n   * This will only have a value if this column is a sub-column.\n   * Note: this doesn't update if you move this sub-column to another parent after instantiation.\n   *\n   * @property parent\n   * @type Column\n   * @optional\n   */\n  parent: null,\n\n  /**\n   * An array of sub columns to be grouped together\n   * @property subColumns\n   * @type {Array}\n   * @optional\n   */\n  subColumns: null,\n\n  /**\n   * An array of media breakpoints that determine when this column will be shown\n   *\n   * If we have the following breakpoints defined in `app/breakpoints.js`:\n   *\n   * - mobile\n   * - tablet\n   * - desktop\n   *\n   * And we want to show this column only for tablet and desktop media, the following\n   * array should be specified: `['tablet', 'desktop']`.\n   *\n   * If this property is `null`, `undefined`, or `[]`, then this column will always\n   * be shown, regardless of the current media type.\n   *\n   * @property breakpoints\n   * @type {Array}\n   * @optional\n   */\n  breakpoints: null,\n\n  /**\n   * Type of column component\n   *\n   * You can create your own column types by running the blueprint:\n   * `ember g column-type my-column-type`\n   *\n   * This will generate a component for you which represents the `<th>`\n   * element for the column. If you want to apply custom actions to the `th`,\n   * or do some custom styling of the `th` with classNameBindings, all of that is\n   * available to you in this component.\n   *\n   * You can then specify the custom type you created as a string here, to use it.\n   *\n   *\n   * @property type\n   * @type {String}\n   * @default 'base'\n   */\n  type: 'base',\n\n  /**\n   * Type of cell component\n   *\n   * You can create your own cell types by running the blueprint:\n   * `ember g cell-type my-cell-type`\n   *\n   * This will generate a component for you which represents the `<td>`\n   * cells in the column. If you want to apply custom actions to the `td`,\n   * or do some custom styling of the `td` with classNameBindings, all of that is\n   * available to you in this component.\n   *\n   * You can then specify the custom type you created as a string here, to use it.\n   *\n   * @property cellType\n   * @type {String}\n   * @default 'base'\n   */\n  cellType: 'base',\n\n  /**\n   * Component name for the column\n   * @property component\n   * @type {String}\n   * @optional\n   */\n  component: null,\n\n  /**\n   * Component name for the column cells. This component is automatically passed row,\n   * column, and value variables, and you can specify a valuePath to set what property\n   * the value is set to.\n   * @property cellComponent\n   * @type {String}\n   * @optional\n   */\n  cellComponent: null,\n\n  /**\n   * @property valuePath\n   * @type {String}\n   */\n  valuePath: null,\n\n  /**\n   * @property width\n   * @type {String}\n   */\n  width: null,\n\n  /**\n   * Class names to be applied to header and footer cells of this column\n   *\n   * @property classNames\n   * @type {String | Array}\n   */\n  classNames: null,\n\n  /**\n   * Class names to be applied to all cells of this column\n   *\n   * @property cellClassNames\n   * @type {String | Array}\n   */\n  cellClassNames: null,\n\n  /**\n   * A format function used to calculate a cell's value. This method will be passed\n   * the raw value if `valuePath` is specified.\n   *\n   * @property format\n   * @type {Function}\n   */\n  format: null,\n\n  /**\n   * Column's unique ID.\n   *\n   * @property columnId\n   * @type {String}\n   * @private\n   */\n  columnId: computed(function() {\n    return guidFor(this);\n  }).readOnly(),\n\n  /**\n   * True if `hidden` or `responsiveHidden` is true.\n   * @property isHidden\n   * @type {Boolean}\n   */\n  isHidden: computed.or('hidden', 'responsiveHidden').readOnly(),\n\n  /**\n   * @property isGroupColumn\n   * @type {Boolean}\n   * @private\n   */\n  isGroupColumn: computed.notEmpty('subColumns').readOnly(),\n\n  /**\n   * @property isVisibleGroupColumn\n   * @type {Boolean}\n   * @private\n   */\n  isVisibleGroupColumn: computed('visibleSubColumns.[]', 'isHidden', function() {\n    return !isEmpty(this.get('visibleSubColumns')) && !this.get('isHidden');\n  }).readOnly(),\n\n  /**\n   * @property visibleSubColumns\n   * @type {Array}\n   * @private\n   */\n  visibleSubColumns: computed('subColumns.[]', 'subColumns.@each.isHidden', 'isHidden', function() {\n    let subColumns = this.get('subColumns');\n    let isHidden = this.get('isHidden');\n\n    return emberArray(isHidden ? [] : subColumns.filterBy('isHidden', false));\n  }).readOnly()\n}) {\n  /**\n   * @class Column\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    if (options instanceof Column) {\n      return options;\n    }\n\n    super();\n    this.setProperties(options);\n\n    let { subColumns } = options;\n\n    subColumns = emberArray(makeArray(subColumns).map((sc) => new Column(sc)));\n    subColumns.setEach('parent', this);\n\n    this.set('subColumns', subColumns);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/classes/Row.js":"import Ember from 'ember';\n\nconst { computed, guidFor } = Ember;\n\n/**\n * @module Table\n * @extends Ember.ObjectProxy\n * @class Row\n */\nexport default class Row extends Ember.ObjectProxy.extend({\n  /**\n   * Whether the row is hidden.\n   *\n   * CSS Classes:\n   *  - `is-hidden`\n   *\n   * @property hidden\n   * @type {Boolean}\n   * @default false\n   */\n  hidden: false,\n\n  /**\n   * Whether the row is expanded.\n   *\n   * CSS Classes:\n   *  - `is-expanded`\n   *\n   * @property expanded\n   * @type {Boolean}\n   * @default false\n   */\n  expanded: false,\n\n  /**\n   * Whether the row is selected.\n   *\n   * CSS Classes:\n   *  - `is-selected`\n   *\n   * @property selected\n   * @type {Boolean}\n   * @default false\n   */\n  selected: false,\n\n  /**\n   * Class names to be applied to this row\n   *\n   * @property classNames\n   * @type {String | Array}\n   */\n  classNames: null,\n\n  /**\n   * Data content for this row. Since this class extends Ember.ObjectProxy,\n   * all properties are forwarded to the content. This means that instead of\n   * `row.content.foo` you can just do `row.foo`. Please note that methods are\n   * not forwarded. You will not be able to do `row.save()`, instead, you would have\n   * to do `row.content.save()`.\n   *\n   * @property content\n   * @type {Object}\n   */\n  content: null,\n\n  /**\n   * Rows's unique ID.\n   *\n   * Note: named `rowId` in order to not shadow the `content.id` property.\n   *\n   * @property rowId\n   * @type {String}\n   * @readOnly\n   */\n  rowId: computed(function() {\n    return guidFor(this);\n  }).readOnly()\n}) {\n  /**\n   * @class Row\n   * @constructor\n   * @param {Object} content\n   * @param {Object} options\n   */\n  constructor(content, options = {}) {\n    if (content instanceof Row) {\n      return content;\n    }\n\n    super();\n    this.setProperties(options);\n    this.set('content', content);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/classes/Table.js":"import Ember from 'ember';\nimport Row from 'ember-light-table/classes/Row';\nimport Column from 'ember-light-table/classes/Column';\nimport SyncArrayProxy from 'ember-light-table/-private/sync-array-proxy';\nimport { mergeOptionsWithGlobals } from 'ember-light-table/-private/global-options';\n\nconst {\n  get,\n  computed,\n  isNone,\n  A: emberArray\n} = Ember;\n\nconst RowSyncArrayProxy = SyncArrayProxy.extend({\n  serializeContentObjects(objects) {\n    return Table.createRows(objects);\n  },\n\n  serializeSyncArrayObjects(objects) {\n    return objects.map((o) => get(o, 'content'));\n  }\n});\n\n/**\n * @module Table\n * @private\n */\n\n/**\n * @module Table\n * @class Table\n */\nexport default class Table extends Ember.Object.extend({\n  /**\n   * @property columns\n   * @type {Ember.Array}\n   * @default []\n   */\n  columns: null,\n\n  /**\n   * @property rows\n   * @type {Ember.Array}\n   * @default []\n   */\n  rows: null,\n\n  /**\n   * @property isEmpty\n   * @type {Boolean}\n   */\n  isEmpty: computed.empty('rows').readOnly(),\n\n  /**\n   * @property expandedRows\n   * @type {Ember.Array}\n   */\n  expandedRows: computed.filterBy('rows', 'expanded', true).readOnly(),\n\n  /**\n   * @property selectedRows\n   * @type {Ember.Array}\n   */\n  selectedRows: computed.filterBy('rows', 'selected', true).readOnly(),\n\n  /**\n   * @property visibleRows\n   * @type {Ember.Array}\n   */\n  visibleRows: computed.filterBy('rows', 'hidden', false).readOnly(),\n\n  /**\n   * @property sortableColumns\n   * @type {Ember.Array}\n   */\n  sortableColumns: computed.filterBy('visibleColumns', 'sortable', true).readOnly(),\n\n  /**\n   * @property sortedColumns\n   * @type {Ember.Array}\n   */\n  sortedColumns: computed.filterBy('visibleColumns', 'sorted', true).readOnly(),\n\n  /**\n   * @property hideableColumns\n   * @type {Ember.Array}\n   */\n  hideableColumns: computed.filterBy('allColumns', 'hideable', true).readOnly(),\n\n  /**\n   * @property hiddenColumns\n   * @type {Ember.Array}\n   */\n  hiddenColumns: computed.filterBy('allColumns', 'hidden', true).readOnly(),\n\n  /**\n   * @property responsiveHiddenColumns\n   * @type {Ember.Array}\n   */\n  responsiveHiddenColumns: computed.filterBy('allColumns', 'responsiveHidden', true).readOnly(),\n\n  /**\n   * @property visibleColumns\n   * @type {Ember.Array}\n   */\n  visibleColumns: computed.filterBy('allColumns', 'isHidden', false).readOnly(),\n\n  /**\n   * @property visibleColumnGroups\n   * @type {Ember.Array}\n   */\n  visibleColumnGroups: computed('columns.[]', 'columns.@each.{isHidden,isVisibleGroupColumn}', function() {\n    return this.get('columns').reduce((arr, c) => {\n      if (c.get('isVisibleGroupColumn') || (!c.get('isGroupColumn') && !c.get('isHidden'))) {\n        arr.pushObject(c);\n      }\n      return arr;\n    }, emberArray([]));\n  }).readOnly(),\n\n  /**\n   * @property visibleSubColumns\n   * @type {Ember.Array}\n   */\n  visibleSubColumns: computed('columns.[]', 'columns.@each.visibleSubColumns', function() {\n    return emberArray([].concat(...this.get('columns').getEach('visibleSubColumns')));\n  }).readOnly(),\n\n  /**\n   * @property allColumns\n   * @type {Ember.Array}\n   */\n  allColumns: computed('columns.[]', 'columns.@each.subColumns', function() {\n    return this.get('columns').reduce((arr, c) => {\n      arr.pushObjects(c.get('isGroupColumn') ? c.get('subColumns') : [c]);\n      return arr;\n    }, emberArray([]));\n  }).readOnly()\n}) {\n  /**\n   * @class Table\n   * @constructor\n   * @param  {Array} columns\n   * @param  {Array} rows\n   * @param  {Object} options\n   *    - enableSync ( _Boolean_ ): If true, creates a two way sync between the table's rows\n   *                                and the passed rows collection\n   */\n  constructor(columns = [], rows = [], options = {}) {\n    super();\n\n    let _columns = emberArray(Table.createColumns(columns));\n    let _rows = emberArray(Table.createRows(rows));\n    let _options = mergeOptionsWithGlobals(options);\n\n    if (_options.enableSync) {\n      _rows = RowSyncArrayProxy.create({\n        syncArray: rows,\n        content: _rows\n      });\n    }\n\n    this.setProperties({\n      columns: _columns,\n      rows: _rows\n    });\n  }\n\n  destroy() {\n    this._super(...arguments);\n\n    let rows = this.get('rows');\n\n    if (rows instanceof RowSyncArrayProxy) {\n      rows.destroy();\n    }\n  }\n\n  // Rows\n\n  /**\n   * Replace all the row's content with content of the argument. If argument is an empty array rows will be cleared.\n   * @method setRows\n   * @param  {Array} rows\n   * @param  {Object} options\n   * @return {Array} rows\n   */\n  setRows(rows = [], options = {}) {\n    return this.get('rows').setObjects(Table.createRows(rows, options));\n  }\n\n  /**\n   * Push the object onto the end of the row array if it is not already present.\n   * @method addRow\n   * @param  {Object} row\n   * @param  {Object} options\n   */\n  addRow(row, options = {}) {\n    if (row instanceof Row) {\n      this.get('rows').addObject(row);\n    } else if (isNone(this.get('rows').findBy('content', row))) {\n      this.pushRow(row, options);\n    }\n  }\n\n  /**\n   * Push the objects onto the end of the row array if it is not already present.\n   * @method addRows\n   * @param  {Array} rows\n   * @param  {Object} options\n   */\n  addRows(rows = [], options = {}) {\n    rows.forEach((r) => this.addRow(r, options));\n  }\n\n  /**\n   * Push the object onto the end of the row array.\n   * @method pushRow\n   * @param  {Object} row\n   * @param  {Object} options\n   * @return {Row} pushed row\n   */\n  pushRow(row, options = {}) {\n    let _row = Table.createRow(row, options);\n    this.get('rows').pushObject(_row);\n    return _row;\n  }\n\n  /**\n   * Push the object onto the end of the row array.\n   * @method pushRows\n   * @param  {Array}  rows\n   * @param  {Object} options\n   * @return {Array} pushed rows\n   */\n  pushRows(rows = [], options = {}) {\n    let _rows = Table.createRows(rows, options);\n    this.get('rows').pushObjects(_rows);\n    return _rows;\n  }\n\n  /**\n   * Insert a row at the specified index.\n   * @method insertRowAt\n   * @param  {Number}  index\n   * @param  {Object}  row\n   * @param  {Object} options\n   * @return {Row} inserted row\n   */\n  insertRowAt(index, row, options = {}) {\n    let _row = Table.createRow(row, options);\n    this.get('rows').insertAt(index, _row);\n    return _row;\n  }\n\n  /**\n   * Remove all occurrences of an object in the rows\n   * @method removeRow\n   * @param  {Object}  row\n   */\n  removeRow(row) {\n    if (row instanceof Row) {\n      this.get('rows').removeObject(row);\n    } else {\n      this.get('rows').removeObjects(this.get('rows').filterBy('content', row));\n    }\n  }\n\n  /**\n   * Removes each object in the passed enumerable from the rows.\n   * @method removeRows\n   * @param  {Array}    rows\n   */\n  removeRows(rows = []) {\n    rows.forEach((r) => this.removeRow(r));\n  }\n\n  /**\n   * Remove a row at the specified index\n   * @method removeRowAt\n   * @param  {Number}  index\n   */\n  removeRowAt(index) {\n    this.get('rows').removeAt(index);\n  }\n\n  // Columns\n\n  /**\n   * Replace all the column's content with content of the argument. If argument is an empty array columns will be cleared.\n   * @method setColumns\n   * @param  {Array} columns\n   * @return {Array} columns\n   */\n  setColumns(columns = []) {\n    return this.get('columns').setObjects(Table.createColumns(columns));\n  }\n\n  /**\n   * Push the object onto the end of the column array if it is not already present.\n   * @method addColumn\n   * @param  {Object} column\n   */\n  addColumn(column) {\n    this.get('columns').addObject(Table.createColumn(column));\n  }\n\n  /**\n   * Push the objects onto the end of the column array if it is not already present.\n   * @method addColumns\n   * @param  {Array} columns\n   */\n  addColumns(columns = []) {\n    this.get('columns').addObjects(Table.createColumns(columns));\n  }\n\n  /**\n   * Push the object onto the end of the column array.\n   * @method pushColumn\n   * @param  {Object} column\n   * @return {Column} pushed column\n   */\n  pushColumn(column) {\n    let _column = Table.createColumn(column);\n    this.get('columns').pushObject(_column);\n    return _column;\n  }\n\n  /**\n   * Push the object onto the end of the column array.\n   * @method pushColumns\n   * @param  {Array}  columns\n   * @return {Array} pushed columns\n   */\n  pushColumns(columns = []) {\n    let _columns = Table.createColumns(columns);\n    this.get('columns').pushObjects(_columns);\n    return _columns;\n  }\n\n  /**\n   * Insert a column at the specified index.\n   * @method insertColumnAt\n   * @param  {Number}  index\n   * @param  {Object}  column\n   * @return {Column} inserted column\n   */\n  insertColumnAt(index, column) {\n    let _column = Table.createColumn(column);\n    this.get('columns').insertAt(index, _column);\n    return _column;\n  }\n\n  /**\n   * Remove all occurrences of an object in the columns\n   * @method removeColumn\n   * @param  {Object}  column\n   */\n  removeColumn(column) {\n    return this.get('columns').removeObject(column);\n  }\n\n  /**\n   * Removes each object in the passed enumerable from the columns.\n   * @method removeColumns\n   * @param  {Array}    columns\n   */\n  removeColumns(columns = []) {\n    return this.get('columns').removeObjects(columns);\n  }\n\n  /**\n   * Remove a column at the specified index\n   * @method removeColumnAt\n   * @param  {Number}  index\n   */\n  removeColumnAt(index) {\n    this.get('columns').removeAt(index);\n  }\n\n  /**\n   * Create a Row object with the given content\n   * @method createRow\n   * @static\n   * @param  {Object}  content\n   * @param  {Object}  options\n   * @return {Row}\n   */\n  static createRow(content, options = {}) {\n    return new Row(content, options);\n  }\n\n  /**\n   * Create a collection of Row objects with the given collection\n   * @method createRows\n   * @static\n   * @param  {Array}  rows\n   * @param  {Object} options\n   * @return {Array}\n   */\n  static createRows(rows = [], options = {}) {\n    return rows.map((r) => Table.createRow(r, options));\n  }\n\n  /**\n   * Create a Column object with the given options\n   * @method createColumn\n   * @static\n   * @param  {Object}  column\n   * @return {Column}\n   */\n  static createColumn(column) {\n    return new Column(column);\n  }\n\n  /**\n   * Create a collection of Column objects with the given collection\n   * @method createColumns\n   * @static\n   * @param  {Array}  columns\n   * @return {Array}\n   */\n  static createColumns(columns = []) {\n    return columns.map((c) => Table.createColumn(c));\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/light-table.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/light-table';\nimport Table from 'ember-light-table/classes/Table';\nimport cssStyleify from 'ember-light-table/utils/css-styleify';\n\nconst {\n  assert,\n  Component,\n  computed,\n  inject,\n  observer,\n  on,\n  isNone,\n  isEmpty,\n  A: emberArray\n} = Ember;\n\nfunction intersections(array1, array2) {\n  return array1.filter((n) => {\n    return array2.indexOf(n) > -1;\n  });\n}\n\n/**\n * @module Light Table\n * @main light-table\n */\n\n/**\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{t.head}}\n *   {{t.body}}\n *   {{t.foot}}\n * {{/light-table}}\n * ```\n *\n * Please see the documentation for the [Head](../classes/t.head.html), [Body](../classes/t.body.html), and [Foot](../classes/t.foot.html) components\n * for more details on all possible options and actions.\n *\n * @class light-table\n * @main Components\n */\n\nconst LightTable = Component.extend({\n  layout,\n  classNameBindings: [':ember-light-table'],\n  attributeBindings: ['style'],\n\n  media: inject.service(),\n\n  /**\n   * @property table\n   * @type {Table}\n   */\n  table: null,\n\n  /**\n   * This is used to propate custom user defined actions to custom cell and header components.\n   * As an example, lets say I have a table with a column defined with `cellComponent: 'delete-user'`\n   *\n   * ```hbs\n   * {{#light-table table tableActions=(hash\n   *   deleteUser=(action 'deleteUser')\n   *  ) as |t|}}\n   *   {{t.head}}\n   *   {{t.body}}\n   *   {{t.foot}}\n   * {{/light-table}}\n   * ```\n   *\n   * Now in the `delete-user` component, we can access that `deleteUser` action and pass it the\n   * row object which will bubble all the way to where you defined that action.\n   *\n   * ```hbs\n   * <button {{action tableActions.deleteUser row}}>Delete Me</button>\n   * ```\n   *\n   *\n   * @property tableActions\n   * @type {Object}\n   */\n  tableActions: null,\n\n  /**\n   * Table height.\n   *\n   * @property height\n   * @type {String}\n   * @default null\n   */\n  height: null,\n\n  /**\n   * Class names that will be added to all <table> tags\n   *\n   * @property tableClassNames\n   * @type {String}\n   * @default ''\n   */\n  tableClassNames: '',\n\n  /**\n   * Enable responsive behavior\n   *\n   * @property responsive\n   * @type {Boolean}\n   * @default false\n   */\n  responsive: false,\n\n  /**\n   * A hash to determine the number of columns to show per given breakpoint.\n   * If this is specified, it will override any column specific breakpoints.\n   *\n   * If we have the following breakpoints defined in `app/breakpoints.js`:\n   *\n   * - mobile\n   * - tablet\n   * - desktop\n   *\n   * The following hash can be passed in:\n   *\n   * ```js\n   * {\n   *  mobile: 2,\n   *  tablet: 4\n   * }\n   * ```\n   *\n   * If there is no rule specified for a given breakpoint (i.e. `desktop`),\n   * all columns will be shown.\n   *\n   * @property breakpoints\n   * @type {Object}\n   * @default null\n   */\n  breakpoints: null,\n\n  /**\n   * Table component shared options\n   *\n   * @property sharedOptions\n   * @type {Object}\n   * @private\n   */\n  sharedOptions: computed(function() {\n    return {\n      height: this.get('height'),\n      fixedHeader: false,\n      fixedFooter: false\n    };\n  }).readOnly(),\n\n  visibleColumns: computed.readOnly('table.visibleColumns'),\n\n  /**\n   * Calculates the total width of the visible columns via their `width`\n   * propert.\n   *\n   * Returns 0 for the following conditions\n   *  - All widths are not set\n   *  - Widths are not the same unit\n   *  - Unit cannot be determined\n   *\n   * @property totalWidth\n   * @type {Number}\n   * @private\n   */\n  totalWidth: computed('visibleColumns.[]', 'visibleColumns.@each.width', function() {\n    let visibleColumns = this.get('visibleColumns');\n    let widths = visibleColumns.getEach('width');\n    let unit = (widths[0] || '').match(/\\D+$/);\n    let totalWidth = 0;\n\n    if (isEmpty(unit)) {\n      return 0;\n    }\n\n    unit = unit[0];\n\n    /*\n      1. Check if all widths are present\n      2. Check if all widths are the same unit\n     */\n    for (let i = 0; i < widths.length; i++) {\n      let width = widths[i];\n\n      if (isNone(width) || width.indexOf(unit) === -1) {\n        return 0;\n      }\n\n      totalWidth += parseInt(width, 10);\n    }\n\n    return `${totalWidth}${unit}`;\n  }),\n\n  style: computed('totalWidth', 'height', function() {\n    let totalWidth = this.get('totalWidth');\n    let style = this.getProperties(['height']);\n\n    if (totalWidth) {\n      style.width = totalWidth;\n      style.overflowX = 'auto';\n    }\n\n    return cssStyleify(style);\n  }),\n\n  init() {\n    this._super(...arguments);\n\n    let table = this.get('table');\n    let media = this.get('media');\n\n    assert('[ember-light-table] table must be an instance of Table', table instanceof Table);\n\n    if (isNone(media)) {\n      this.set('responsive', false);\n    }\n  },\n\n  onMediaChange: on('init', observer('media.matches.[]', 'table.allColumns.[]', function() {\n    let responsive = this.get('responsive');\n    let matches = this.get('media.matches');\n    let breakpoints = this.get('breakpoints');\n    let table = this.get('table');\n    let numColumns = 0;\n\n    if (!responsive) {\n      return;\n    }\n\n    this.send('onBeforeResponsiveChange', matches);\n\n    if (!isNone(breakpoints)) {\n      Object.keys(breakpoints).forEach((b) => {\n        if (matches.indexOf(b) > -1) {\n          numColumns = Math.max(numColumns, breakpoints[b]);\n        }\n      });\n\n      this._displayColumns(numColumns);\n    } else {\n      table.get('allColumns').forEach((c) => {\n        let breakpoints = c.get('breakpoints');\n        let isMatch = isEmpty(breakpoints) || intersections(matches, breakpoints).length > 0;\n        c.set('responsiveHidden', !isMatch);\n      });\n    }\n\n    this.send('onAfterResponsiveChange', matches);\n  })),\n\n  _displayColumns(numColumns) {\n    let table = this.get('table');\n    let hiddenColumns = table.get('responsiveHiddenColumns');\n    let visibleColumns = table.get('visibleColumns');\n\n    if (!numColumns) {\n      hiddenColumns.setEach('responsiveHidden', false);\n    } else if (visibleColumns.length > numColumns) {\n      emberArray(visibleColumns.slice(numColumns, visibleColumns.length)).setEach('responsiveHidden', true);\n    } else if (visibleColumns.length < numColumns) {\n      emberArray(hiddenColumns.slice(0, numColumns - visibleColumns.length)).setEach('responsiveHidden', false);\n    }\n  },\n\n  actions: {\n    /**\n     * onBeforeResponsiveChange action.\n     * Called before any column visibility is altered.\n     *\n     * @event onBeforeResponsiveChange\n     * @param  {Array} matches list of matching breakpoints\n     */\n    onBeforeResponsiveChange(/* matches */) {\n      this.sendAction('onBeforeResponsiveChange', ...arguments);\n    },\n\n    /**\n     * onAfterResponsiveChange action.\n     * Called after all column visibility has been altered.\n     *\n     * @event onAfterResponsiveChange\n     * @param  {Array} matches list of matching breakpoints\n     */\n    onAfterResponsiveChange(/* matches */) {\n      this.sendAction('onAfterResponsiveChange', ...arguments);\n    }\n  }\n});\n\nLightTable.reopenClass({\n  positionalParams: ['table']\n});\n\nexport default LightTable;\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-body.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/lt-body';\nimport Row from 'ember-light-table/classes/Row';\n\nconst {\n  Component,\n  computed,\n  run,\n  observer\n} = Ember;\n\n/**\n * @module Light Table\n */\n\n/**\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{#t.body multiSelect=true onRowClick=(action 'rowClicked')}}\n *     {{#body.expanded-row as |row|}}\n *       Hello <b>{{row.firstName}}</b>\n *     {{/body.expanded-row}}\n *\n *     {{#if isLoading}}\n *       {{#body.loader}}\n *         Loading...\n *       {{/body.loader}}\n *     {{/if}}\n *\n *     {{#if table.isEmpty}}\n *       {{#body.no-data}}\n *         No users found.\n *       {{/body.no-data}}\n *     {{/if}}\n *   {{/t.body}}\n * {{/light-table}}\n * ```\n *\n * @class t.body\n */\n\nexport default Component.extend({\n  layout,\n  classNames: ['lt-body-wrap'],\n  classNameBindings: ['canSelect', 'multiSelect', 'canExpand'],\n\n  /**\n   * @property table\n   * @type {Table}\n   * @private\n   */\n  table: null,\n\n  /**\n   * @property sharedOptions\n   * @type {Object}\n   * @private\n   */\n  sharedOptions: null,\n\n  /**\n   * @property tableActions\n   * @type {Object}\n   */\n  tableActions: null,\n\n  /**\n   * Allows a user to select a row on click. All this will do is apply the necessary\n   * CSS classes and add the row to `table.selectedRows`. If `multiSelect` is disabled\n   * only one row will be selected at a time.\n   *\n   * @property canSelect\n   * @type {Boolean}\n   * @default true\n   */\n  canSelect: true,\n\n  /**\n   * Select a row on click. If this is set to `false` and multiSelect is\n   * enabled, using click + `shift`, `cmd`, or `ctrl` will still work as\n   * intended, while clicking on the row will not set the row as selected.\n   *\n   * @property selectOnClick\n   * @type {Boolean}\n   * @default true\n   */\n  selectOnClick: true,\n\n  /**\n   * Allows for expanding row. This will create a new row under the row that was\n   * clicked with the template provided by `body.expanded-row`.\n   *\n   * ```hbs\n   * {{#body.expanded-row as |row|}}\n   *  This is the content of the expanded row for {{row.firstName}}\n   * {{/body.expanded-row}}\n   * ```\n   *\n   * @property canExpand\n   * @type {Boolean}\n   * @default false\n   */\n  canExpand: false,\n\n  /**\n   * Allows a user to select multiple rows with the `ctrl`, `cmd`, and `shift` keys.\n   * These rows can be easily accessed via `table.get('selectedRows')`\n   *\n   * @property multiSelect\n   * @type {Boolean}\n   * @default false\n   */\n  multiSelect: false,\n\n  /**\n   * When multiSelect is true, this property determines whether or not `ctrl`\n   * (or `cmd`) is required to select additional rows, one by one. When false,\n   * simply clicking on subsequent rows will select or deselect them.\n   *\n   * `shift` to select many consecutive rows is unaffected by this property.\n   *\n   * @property multiSelectRequiresKeyboard\n   * @type {Boolean}\n   * @default true\n   */\n  multiSelectRequiresKeyboard: true,\n\n  /**\n   * Hide scrollbar when not scrolling\n   *\n   * @property autoHideScrollbar\n   * @type {Boolean}\n   * @default true\n   */\n  autoHideScrollbar: true,\n\n  /**\n   * Allows multiple rows to be expanded at once\n   *\n   * @property multiRowExpansion\n   * @type {Boolean}\n   * @default true\n   */\n  multiRowExpansion: true,\n\n  /**\n   * Expand a row on click\n   *\n   * @property expandOnClick\n   * @type {Boolean}\n   * @default true\n   */\n  expandOnClick: true,\n\n  /**\n   * If true, the body block will yield columns and rows, allowing you\n   * to define your own table body\n   *\n   * @property overwrite\n   * @type {Boolean}\n   * @default false\n   */\n  overwrite: false,\n\n  /**\n   * ID of main table component. Used to generate divs for ember-wormhole\n   *\n   * @property tableId\n   * @type {String}\n   * @private\n   */\n  tableId: null,\n\n  /**\n   * @property scrollBuffer\n   * @type {Number}\n   * @default 500\n   */\n  scrollBuffer: 500,\n\n  /**\n   * @property useVirtualScrollbar\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  useVirtualScrollbar: false,\n\n  /**\n   * Set this property to scroll to a specific px offset.\n   *\n   * This only works when `useVirtualScrollbar` is `true`, i.e. when you are\n   * using fixed headers / footers.\n   *\n   * @property scrollTo\n   * @type {Number}\n   * @default null\n   */\n  scrollTo: null,\n  _scrollTo: null,\n\n  /**\n   * Set this property to a `Row` to scroll that `Row` into view.\n   *\n   * This only works when `useVirtualScrollbar` is `true`, i.e. when you are\n   * using fixed headers / footers.\n   *\n   * @property scrollToRow\n   * @type {Row}\n   * @default null\n   */\n  scrollToRow: null,\n  _scrollToRow: null,\n\n  /**\n   * @property targetScrollOffset\n   * @type {Number}\n   * @default 0\n   * @private\n   */\n  targetScrollOffset: 0,\n\n  /**\n   * @property currentScrollOffset\n   * @type {Number}\n   * @default 0\n   * @private\n   */\n  currentScrollOffset: 0,\n\n  /**\n   * @property hasReachedTargetScrollOffset\n   * @type {Boolean}\n   * @default true\n   * @private\n   */\n  hasReachedTargetScrollOffset: true,\n\n  /**\n   * Allows to customize the component used to render rows\n   *\n   * ```hbs\n   * {{#light-table table as |t|}}\n   *    {{t.body rowComponent=(component 'my-row')}}\n   * {{/light-table}}\n   * ```\n   * @property rowComponent\n   * @type {Ember.Component}\n   * @default null\n   */\n  rowComponent: null,\n\n  /**\n   * Allows to customize the component used to render spanned rows\n   *\n   * ```hbs\n   * {{#light-table table as |t|}}\n   *    {{t.body spannedRowComponent=(component 'my-spanned-row')}}\n   * {{/light-table}}\n   * ```\n   * @property spannedRowComponent\n   * @type {Ember.Component}\n   * @default null\n   */\n  spannedRowComponent: null,\n\n  /**\n   * Allows to customize the component used to render infinite loader\n   *\n   * ```hbs\n   * {{#light-table table as |t|}}\n   *    {{t.body infinityComponent=(component 'my-infinity')}}\n   * {{/light-table}}\n   * ```\n   * @property infinityComponent\n   * @type {Ember.Component}\n   * @default null\n   */\n  infinityComponent: null,\n\n  rows: computed.readOnly('table.visibleRows'),\n  columns: computed.readOnly('table.visibleColumns'),\n  colspan: computed.readOnly('columns.length'),\n\n  _prevSelectedIndex: -1,\n\n  init() {\n    this._super(...arguments);\n\n    /*\n      We can only set `useVirtualScrollbar` once all contextual components have\n      been initialized since fixedHeader and fixedFooter are set on t.head and t.foot\n      initialization.\n     */\n    run.once(this, this._setupVirtualScrollbar);\n  },\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n    this.setupScrollOffset();\n  },\n\n  destroy() {\n    this._super(...arguments);\n    run.cancel(this._checkTargetOffsetTimer);\n    run.cancel(this._setTargetOffsetTimer);\n  },\n\n  _setupVirtualScrollbar() {\n    let { fixedHeader, fixedFooter } = this.get('sharedOptions');\n    this.set('useVirtualScrollbar', fixedHeader || fixedFooter);\n  },\n\n  onRowsChange: observer('rows.[]', function() {\n    this._checkTargetOffsetTimer = run.scheduleOnce('afterRender', this, this.checkTargetScrollOffset);\n  }),\n\n  setupScrollOffset() {\n    let {\n      scrollTo,\n      _scrollTo,\n      scrollToRow,\n      _scrollToRow\n    } = this.getProperties(['scrollTo', '_scrollTo', 'scrollToRow', '_scrollToRow']);\n    let targetScrollOffset = null;\n\n    this.setProperties({ _scrollTo: scrollTo, _scrollToRow: scrollToRow });\n\n    if (scrollTo !== _scrollTo) {\n      targetScrollOffset = Number.parseInt(scrollTo, 10);\n\n      if (Number.isNaN(targetScrollOffset)) {\n        targetScrollOffset = null;\n      }\n\n      this.setProperties({\n        targetScrollOffset,\n        hasReachedTargetScrollOffset: targetScrollOffset <= 0\n      });\n    } else if (scrollToRow !== _scrollToRow) {\n      if (scrollToRow instanceof Row) {\n        let rowElement = document.getElementById(scrollToRow.get('rowId'));\n\n        if (rowElement instanceof Element) {\n          targetScrollOffset = rowElement.offsetTop;\n        }\n      }\n\n      this.setProperties({ targetScrollOffset, hasReachedTargetScrollOffset: true });\n    }\n  },\n\n  checkTargetScrollOffset() {\n    if (!this.get('hasReachedTargetScrollOffset')) {\n      let targetScrollOffset = this.get('targetScrollOffset');\n      let currentScrollOffset = this.get('currentScrollOffset');\n\n      if (targetScrollOffset > currentScrollOffset) {\n        this.set('targetScrollOffset', null);\n        this._setTargetOffsetTimer = run.schedule('render', null, () => {\n          this.set('targetScrollOffset', targetScrollOffset);\n        });\n      } else {\n        this.set('hasReachedTargetScrollOffset', true);\n      }\n    }\n  },\n\n  toggleExpandedRow(row) {\n    let multiRowExpansion = this.get('multiRowExpansion');\n    let shouldExpand = !row.expanded;\n\n    if (multiRowExpansion) {\n      row.toggleProperty('expanded');\n    } else {\n      this.get('table.expandedRows').setEach('expanded', false);\n      row.set('expanded', shouldExpand);\n    }\n  },\n\n  actions: {\n    /**\n     * onRowClick action. Handles selection, and row expansion.\n     * @event onRowClick\n     * @param  {Row}   row The row that was clicked\n     * @param  {Event}   event   The click event\n     */\n    onRowClick(row, e) {\n      let rows = this.get('table.rows');\n      let multiSelect = this.get('multiSelect');\n      let multiSelectRequiresKeyboard = this.get('multiSelectRequiresKeyboard');\n      let canSelect = this.get('canSelect');\n      let selectOnClick = this.get('selectOnClick');\n      let canExpand = this.get('canExpand');\n      let expandOnClick = this.get('expandOnClick');\n      let isSelected = row.get('selected');\n      let currIndex = rows.indexOf(row);\n      let prevIndex = this._prevSelectedIndex === -1 ? currIndex : this._prevSelectedIndex;\n\n      this._prevSelectedIndex = currIndex;\n\n      let toggleExpandedRow = () => {\n        if (canExpand && expandOnClick) {\n          this.toggleExpandedRow(row);\n        }\n      };\n\n      if (canSelect) {\n        if (e.shiftKey && multiSelect) {\n          rows\n            .slice(Math.min(currIndex, prevIndex), Math.max(currIndex, prevIndex) + 1)\n            .forEach((r) => r.set('selected', !isSelected));\n        } else if ((!multiSelectRequiresKeyboard || (e.ctrlKey || e.metaKey)) && multiSelect) {\n          row.toggleProperty('selected');\n        } else {\n          if (selectOnClick) {\n            this.get('table.selectedRows').setEach('selected', false);\n            row.set('selected', !isSelected);\n          }\n\n          toggleExpandedRow();\n        }\n      } else {\n        toggleExpandedRow();\n      }\n\n      this.sendAction('onRowClick', ...arguments);\n    },\n\n    /**\n     * onRowDoubleClick action.\n     * @event onRowDoubleClick\n     * @param  {Row}   row The row that was clicked\n     * @param  {Event}   event   The click event\n     */\n    onRowDoubleClick(/* row */) {\n      this.sendAction('onRowDoubleClick', ...arguments);\n    },\n\n    /**\n     * onScroll action - sent when user scrolls in the Y direction\n     *\n     * This only works when `useVirtualScrollbar` is `true`, i.e. when you are\n     * using fixed headers / footers.\n     *\n     * @event onScroll\n     * @param {Number} scrollOffset The scroll offset in px\n     * @param {Event} event The scroll event\n     */\n    onScroll(scrollOffset /* , event */) {\n      this.set('currentScrollOffset', scrollOffset);\n      this.sendAction('onScroll', ...arguments);\n    },\n\n    /**\n     * onScrolledToBottom action - sent when user scrolls to the bottom\n     *\n     * @event onScrolledToBottom\n     */\n    onScrolledToBottom() {\n      this.sendAction('onScrolledToBottom');\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-column-resizer.js":"import Ember from 'ember';\nimport layout from '../templates/components/lt-column-resizer';\n\nconst {\n  $,\n  computed\n} = Ember;\n\nconst TOP_LEVEL_CLASS = '.ember-light-table';\n\nexport default Ember.Component.extend({\n  layout,\n  classNameBindings: [':lt-column-resizer', 'isResizing'],\n  column: null,\n  resizeOnDrag: false,\n\n  isResizing: false,\n  startWidth: null,\n  startX: null,\n\n  $column: computed(function() {\n    return $(this.get('element')).parent('th');\n  }).volatile().readOnly(),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.__mouseMove = this._mouseMove.bind(this);\n    this.__mouseUp = this._mouseUp.bind(this);\n\n    $(document).on('mousemove', this.__mouseMove);\n    $(document).on('mouseup', this.__mouseUp);\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    $(document).off('mousemove', this.__mouseMove);\n    $(document).off('mouseup', this.__mouseUp);\n  },\n\n  click(e) {\n    /*\n      Prevent click events from propagating (i.e. onColumnClick)\n     */\n    e.preventDefault();\n    e.stopPropagation();\n  },\n\n  mouseDown(e) {\n    let $column = this.get('$column');\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.setProperties({\n      isResizing: true,\n      startWidth: $column.outerWidth(),\n      startX: e.pageX\n    });\n\n    this.$().closest(TOP_LEVEL_CLASS).addClass('is-resizing');\n  },\n\n  _mouseUp(e) {\n    if (this.get('isResizing')) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      let $column = this.get('$column');\n      let width = `${$column.outerWidth()}px`;\n\n      this.set('isResizing', false);\n      this.set('column.width', width);\n\n      this.sendAction('onColumnResized', width);\n      this.$().closest(TOP_LEVEL_CLASS).removeClass('is-resizing');\n    }\n  },\n\n  _mouseMove(e) {\n    if (this.get('isResizing')) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      let resizeOnDrag = this.get('resizeOnDrag');\n      let minResizeWidth = this.get('column.minResizeWidth');\n      let { startX, startWidth } = this.getProperties(['startX', 'startWidth']);\n      let width = `${Math.max(startWidth + (e.pageX - startX), minResizeWidth)}px`;\n\n      let $column = this.get('$column');\n      let $index = this.get('table.visibleColumns').indexOf(this.get('column')) + 1;\n      let $table = this.$().closest(TOP_LEVEL_CLASS);\n\n      $column.outerWidth(width);\n      $(`thead td.lt-scaffolding:nth-child(${$index})`, $table).outerWidth(width);\n      $(`tfoot td.lt-scaffolding:nth-child(${$index})`, $table).outerWidth(width);\n\n      if (resizeOnDrag) {\n        $(`tbody td:nth-child(${$index})`, $table).outerWidth(width);\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-foot.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/lt-foot';\nimport TableHeaderMixin from 'ember-light-table/mixins/table-header';\n\nconst {\n  assert,\n  Component,\n  isEmpty,\n  set\n} = Ember;\n\n/**\n * @module Light Table\n */\n\n/**\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{t.foot onColumnClick=(action 'sortByColumn')}}\n * {{/light-table}}\n * ```\n * If you want to define your own tfoot, just declare the contextual component in a block.\n *\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{#t.foot onColumnClick=(action 'sortByColumn') as |columns table|}}\n *     {{#each columns as |column|}}\n *       {{!-- ... --}}\n *     {{/each}}\n *   {{/t.foot}}\n * {{/light-table}}\n * ```\n *\n * will be empty\n *\n * @class t.foot\n * @uses TableHeaderMixin\n */\n\nexport default Component.extend(TableHeaderMixin, {\n  layout,\n  classNames: ['lt-foot-wrap'],\n  table: null,\n  sharedOptions: null,\n\n  init() {\n    this._super(...arguments);\n\n    let sharedOptions = this.get('sharedOptions') || {};\n    let fixed = this.get('fixed');\n\n    assert('[ember-light-table] The height property is required for fixed footer', !fixed || fixed && !isEmpty(sharedOptions.height));\n\n    set(sharedOptions, 'fixedFooter', fixed);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-head.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/lt-head';\nimport TableHeaderMixin from 'ember-light-table/mixins/table-header';\n\nconst {\n  assert,\n  Component,\n  isEmpty,\n  set\n} = Ember;\n\n/**\n * @module Light Table\n */\n\n/**\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{t.head onColumnClick=(action 'sortByColumn')}}\n * {{/light-table}}\n * ```\n *\n * If you want to define your own thead, just declare the contextual component in a block.\n *\n * ```hbs\n * {{#light-table table as |t|}}\n *   {{#t.head onColumnClick=(action 'sortByColumn') as |groups subColumns|}}\n *     {{#each groups as |group|}}\n *       {{!-- ... --}}\n *     {{/each}}\n *   {{/t.head}}\n * {{/light-table}}\n * ```\n *\n * If you dont have grouped columns, the yielded `groups` will be an array of all visibile columns and `subColumns`\n * will be empty\n *\n * @class t.head\n * @uses TableHeaderMixin\n */\n\nexport default Component.extend(TableHeaderMixin, {\n  layout,\n  classNames: ['lt-head-wrap'],\n  table: null,\n  sharedOptions: null,\n\n  init() {\n    this._super(...arguments);\n\n    let sharedOptions = this.get('sharedOptions') || {};\n    let fixed = this.get('fixed');\n\n    assert('[ember-light-table] The height property is required for fixed header', !fixed || fixed && !isEmpty(sharedOptions.height));\n\n    set(sharedOptions, 'fixedHeader', fixed);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-infinity.js":"import Ember from 'ember';\nimport layout from '../templates/components/lt-infinity';\nimport InViewportMixin from 'ember-in-viewport';\n\nconst {\n  Component,\n  observer,\n  run\n} = Ember;\n\nexport default Component.extend(InViewportMixin, {\n  classNames: ['lt-infinity'],\n  classNameBindings: ['viewportEntered:in-viewport'],\n  layout,\n\n  rows: null,\n  scrollBuffer: null,\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    let scrollBuffer = this.get('scrollBuffer');\n    let width = this.$().width();\n\n    this.setProperties({\n      viewportSpy: true,\n      viewportTolerance: {\n        left: width,\n        right: width,\n        bottom: scrollBuffer,\n        top: 0\n      }\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this._cancelTimers();\n  },\n\n  didEnterViewport() {\n    this._debounceScrolledToBottom();\n  },\n\n  didExitViewport() {\n    this._cancelTimers();\n  },\n\n  scheduleScrolledToBottom: observer('rows.[]', 'viewportEntered', function() {\n    if (this.get('viewportEntered')) {\n      /*\n        Continue scheduling onScrolledToBottom until no longer in viewport\n       */\n      this._scheduleScrolledToBottom();\n    }\n  }),\n\n  _scheduleScrolledToBottom() {\n    this._schedulerTimer = run.scheduleOnce('afterRender', this, this._debounceScrolledToBottom);\n  },\n\n  _debounceScrolledToBottom(delay = 100) {\n    /*\n      This debounce is needed when there is not enough delay between onScrolledToBottom calls.\n      Without this debounce, all rows will be rendered causing immense performance problems\n     */\n    this._debounceTimer = run.debounce(this, this.sendAction, 'onScrolledToBottom', delay);\n  },\n\n  _cancelTimers() {\n    run.cancel(this._schedulerTimer);\n    run.cancel(this._debounceTimer);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-row.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/lt-row';\n\nconst {\n  Component,\n  computed\n} = Ember;\n\nconst Row = Component.extend({\n  layout,\n  tagName: 'tr',\n  classNames: ['lt-row'],\n  classNameBindings: ['isSelected', 'isExpanded', 'canExpand:is-expandable', 'canSelect:is-selectable', 'row.classNames'],\n  attributeBindings: ['colspan'],\n\n  columns: null,\n  row: null,\n  tableActions: null,\n  canExpand: false,\n  canSelect: false,\n  colspan: 1,\n\n  isSelected: computed.readOnly('row.selected'),\n  isExpanded: computed.readOnly('row.expanded')\n});\n\nRow.reopenClass({\n  positionalParams: ['row', 'columns']\n});\n\nexport default Row;\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-scrollable.js":"import Ember from 'ember';\nimport layout from '../templates/components/lt-scrollable';\n\nconst {\n  Component\n} = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: '',\n  vertical: true,\n  horizontal: false\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/lt-spanned-row.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/lt-spanned-row';\n\nconst {\n  Component\n} = Ember;\n\nexport default Component.extend({\n  layout,\n  colspan: 1,\n  tagName: '',\n  visible: true\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/mixins/draggable-column.js":"import Ember from 'ember';\n\nconst {\n  run,\n  computed\n} = Ember;\n\nlet sourceColumn;\n\nexport default Ember.Mixin.create({\n  classNameBindings: ['isDragging', 'isDragTarget', 'dragDirection'],\n  attributeBindings: ['isDraggable:draggable'],\n\n  isDragging: false,\n  isDragTarget: false,\n\n  dragDirection: computed('isDragTarget', function() {\n    if (this.get('isDragTarget')) {\n      let columns = this.get('dragColumnGroup');\n      let targetIdx = columns.indexOf(this.get('column'));\n      let sourceIdx = columns.indexOf(sourceColumn);\n      let direction = (sourceIdx - targetIdx) < 0 ? 'right' : 'left';\n\n      return `drag-${direction}`;\n    }\n  }).readOnly(),\n\n  /**\n   * Array of Columns indicating where the column can be potentially dragged.\n   * If the column is part of a group (has a parent column), this will be all of the columns in that group,\n   * otherwise it's all of the columns in the table.\n   *\n   * @property dragColumnGroup\n   * @type Array\n   * @readonly\n   */\n  dragColumnGroup: computed('column.parent', function() {\n    let parent = this.get('column.parent');\n    return parent ? parent.get('subColumns') : this.get('table.columns');\n  }).readOnly(),\n\n  isDropTarget: computed(function() {\n    let column = this.get('column');\n    /*\n      A column is a valid drop target only if its in the same group\n     */\n    return column.get('droppable') && column.get('parent') === sourceColumn.get('parent');\n  }).volatile().readOnly(),\n\n  dragStart(e) {\n    this._super(...arguments);\n\n    let column = this.get('column');\n\n    /*\n      NOTE: IE requires setData type to be 'text'\n     */\n    e.dataTransfer.setData('text', column.get('columnId'));\n    e.dataTransfer.effectAllowed = 'move';\n\n    sourceColumn = column;\n    this.set('isDragging', true);\n    this.sendAction('onColumnDrag', sourceColumn, ...arguments);\n\n    /*\n      NOTE: This is a fix for Firefox to prevent the click event\n      from being triggered after a drop.\n     */\n    this.__click__ = this.click;\n    this.click = undefined;\n  },\n\n  dragEnter(e) {\n    this._super(...arguments);\n\n    if (this.get('isDropTarget')) {\n      e.preventDefault();\n      this.set('isDragTarget', this.get('column') !== sourceColumn);\n    }\n  },\n\n  dragOver(e) {\n    this._super(...arguments);\n\n    if (this.get('isDropTarget')) {\n      e.preventDefault();\n    }\n  },\n\n  dragLeave() {\n    this._super(...arguments);\n    this.set('isDragTarget', false);\n  },\n\n  dragEnd() {\n    this._super(...arguments);\n\n    this.setProperties({ isDragTarget: false, isDragging: false });\n\n    /*\n      If sourceColumn still references a column, it means that a successful\n      drop did not happen.\n     */\n    if (sourceColumn) {\n      this.sendAction('onColumnDrop', sourceColumn, false, ...arguments);\n      sourceColumn = null;\n    }\n\n    /*\n      Restore click event\n     */\n    this._clickResetTimer = run.next(this, () => this.click = this.__click__);\n  },\n\n  drop(e) {\n    this._super(...arguments);\n\n    let table = this.get('table');\n    let targetColumn = this.get('column');\n    let columns = this.get('dragColumnGroup');\n\n    let _columns = columns.toArray();\n    let targetColumnIdx = _columns.indexOf(targetColumn);\n\n    e.dataTransfer.dropEffect = 'move';\n    e.preventDefault();\n    e.stopPropagation();\n\n    table.propertyWillChange('columns');\n\n    _columns.removeObject(sourceColumn);\n    _columns.insertAt(targetColumnIdx, sourceColumn);\n    columns.setObjects(_columns);\n\n    table.propertyDidChange('columns');\n\n    this.setProperties({ isDragTarget: false, isDragging: false });\n\n    this.sendAction('onColumnDrop', sourceColumn, true, ...arguments);\n    sourceColumn = null;\n  },\n\n  destroy() {\n    this._super(...arguments);\n    run.cancel(this._clickResetTimer);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/mixins/table-header.js":"import Ember from 'ember';\n\nconst {\n  computed\n} = Ember;\n\n/**\n * @module Light Table\n */\n\n/**\n * @class TableHeaderMixin\n * @extends Ember.Mixin\n * @private\n */\n\nexport default Ember.Mixin.create({\n  /**\n   * @property table\n   * @type {Table}\n   * @private\n   */\n  table: null,\n\n  /**\n   * @property sharedOptions\n   * @type {Object}\n   * @private\n   */\n  sharedOptions: null,\n\n  /**\n   * @property tableActions\n   * @type {Object}\n   */\n  tableActions: null,\n\n  /**\n   * @property fixed\n   * @type {Boolean}\n   * @default false\n   */\n  fixed: false,\n\n  /**\n   * @property sortOnClick\n   * @type {Boolean}\n   * @default true\n   */\n  sortOnClick: true,\n\n  /**\n   * @property multiColumnSort\n   * @type {Boolean}\n   * @default false\n   */\n  multiColumnSort: false,\n\n  /**\n   * Resize all cells in the column instead of just the header / footer\n   *\n   * @property resizeOnDrag\n   * @type {Boolean}\n   * @default false\n   */\n  resizeOnDrag: false,\n\n  /**\n   * @property iconAscending\n   * @type {String}\n   * @default ''\n   */\n  iconAscending: '',\n\n  /**\n   * @property iconDescending\n   * @type {String}\n   * @default ''\n   */\n  iconDescending: '',\n\n  /**\n   * ID of main table component. Used to generate divs for ember-wormhole\n   * @type {String}\n   */\n  tableId: null,\n\n  renderInPlace: computed.oneWay('fixed'),\n  columnGroups: computed.readOnly('table.visibleColumnGroups'),\n  subColumns: computed.readOnly('table.visibleSubColumns'),\n  columns: computed.readOnly('table.visibleColumns'),\n\n  sortIcons: computed('iconAscending', 'iconDescending', function() {\n    return this.getProperties(['iconAscending', 'iconDescending']);\n  }).readOnly(),\n\n  actions: {\n    /**\n     * onColumnClick action. Handles column sorting.\n     *\n     * @event onColumnClick\n     * @param  {Column} column The column that was clicked\n     * @param  {Event} event The click event\n     */\n    onColumnClick(column) {\n      if (column.sortable && this.get('sortOnClick')) {\n        if (column.sorted) {\n          column.toggleProperty('ascending');\n        } else {\n          if (!this.get('multiColumnSort')) {\n            this.get('table.sortedColumns').setEach('sorted', false);\n          }\n          column.set('sorted', true);\n        }\n      }\n      this.sendAction('onColumnClick', ...arguments);\n    },\n\n    /**\n     * onColumnDoubleClick action.\n     *\n     * @event onColumnDoubleClick\n     * @param  {Column} column The column that was clicked\n     * @param  {Event} event   The click event\n     */\n    onColumnDoubleClick(/* column */) {\n      this.sendAction('onColumnDoubleClick', ...arguments);\n    },\n\n    /**\n     * onColumnResized action.\n     *\n     * @event onColumnResized\n     * @param  {Column} column The column that was resized\n     * @param  {String} width  The final width of the column\n     */\n    onColumnResized(/* column, width */) {\n      this.sendAction('onColumnResized', ...arguments);\n    },\n\n    /**\n     * onColumnDrag action.\n     *\n     * @event onColumnDrag\n     * @param  {Column} column The column that is being dragged\n     */\n    onColumnDrag(/* column */) {\n      this.sendAction('onColumnDrag', ...arguments);\n    },\n\n    /**\n     * onColumnDrop action.\n     *\n     * @event onColumnDrop\n     * @param  {Column} column The column that was dropped\n     * @param  {Boolean} isSuccess The column was successfully dropped and sorted\n     */\n    onColumnDrop(/* column, isSuccess */) {\n      this.sendAction('onColumnDrop', ...arguments);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/-private/global-options.js":"import Ember from 'ember';\nimport config from 'ember-get-config';\n\nconst assign = Ember.assign || Ember.merge;\nconst globalOptions = config['ember-light-table'] || {};\n\nexport default globalOptions;\n\nexport function mergeOptionsWithGlobals(options) {\n  return assign(assign({}, globalOptions), options);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/-private/sync-array-proxy.js":"import Ember from 'ember';\n\nconst {\n  assert,\n  isArray\n} = Ember;\n\nconst EMPTY_ARRAY = [];\n\nexport default Ember.ArrayProxy.extend({\n  /**\n   * The model that will be synchronized to the content of this proxy\n   * @property syncArray\n   * @type {Array}\n   */\n  syncArray: null,\n\n  /**\n   * @property syncEnabled\n   * @type {Boolean}\n   */\n  syncEnabled: true,\n\n  init() {\n    this._super(...arguments);\n\n    let syncArray = this.get('syncArray');\n\n    assert('[ember-light-table] enableSync requires the passed array to be an instance of Ember.A', isArray(syncArray) && typeof syncArray.addArrayObserver === 'function');\n\n    syncArray.addArrayObserver(this, {\n      willChange: 'syncArrayWillChange',\n      didChange: 'syncArrayDidChange'\n    });\n  },\n\n  destroy() {\n    this.get('syncArray').removeArrayObserver(this, {\n      willChange: 'syncArrayWillChange',\n      didChange: 'syncArrayDidChange'\n    });\n\n    this.setProperties({\n      syncArray: null,\n      content: null\n    });\n  },\n\n  /**\n   * Serialize objects before they are inserted into the content array\n   * @method serializeContentObjects\n   * @param {Array} objects\n   * @return {Array}\n   */\n  serializeContentObjects(objects) {\n    return objects;\n  },\n\n  /**\n   * Serialize objects before they are inserted into the sync array\n   * @method serializeSyncArrayObjects\n   * @param {Array} objects\n   * @return {Array}\n   */\n  serializeSyncArrayObjects(objects) {\n    return objects;\n  },\n\n  syncArrayWillChange() { /* Not needed */ },\n\n  syncArrayDidChange(syncArray, start, removeCount, addCount) {\n    let content = this.get('content');\n    let objectsToAdd = EMPTY_ARRAY;\n\n    if (!this.get('syncEnabled')) {\n      return;\n    }\n\n    if (addCount > 0) {\n      objectsToAdd = this.serializeContentObjects(syncArray.slice(start, start + addCount));\n    }\n\n    content.replace(start, removeCount, objectsToAdd);\n  },\n\n  replaceContent(start, removeCount, objectsToAdd) {\n    let syncArray = this.get('syncArray');\n\n    if (!this.get('syncEnabled')) {\n      return this._super(...arguments);\n    }\n\n    syncArray.replace(start, removeCount, this.serializeSyncArrayObjects(objectsToAdd));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/utils/css-styleify.js":"import Ember from 'ember';\n\nconst {\n  isPresent,\n  String: {\n    dasherize,\n    htmlSafe\n  }\n} = Ember;\n\nexport default function cssStyleify(hash = {}) {\n  let styles = [];\n\n  Object.keys(hash).forEach((key) => {\n    let value = hash[key];\n\n    if (isPresent(value)) {\n      styles.push(`${dasherize(key)}: ${value}`);\n    }\n  });\n\n  return htmlSafe(styles.join('; '));\n}\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/light-table.js":"export { default } from 'ember-light-table/components/light-table';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-body.js":"export { default } from 'ember-light-table/components/lt-body';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-column-resizer.js":"export { default } from 'ember-light-table/components/lt-column-resizer';\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-foot.js":"export { default } from 'ember-light-table/components/lt-foot';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-head.js":"export { default } from 'ember-light-table/components/lt-head';\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-infinity.js":"export { default } from 'ember-light-table/components/lt-infinity';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-row.js":"export { default } from 'ember-light-table/components/lt-row';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-scrollable.js":"export { default } from 'ember-light-table/components/lt-scrollable';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/app/components/lt-spanned-row.js":"export { default } from 'ember-light-table/components/lt-spanned-row';","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/cells/base.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/cells/base';\nimport cssStyleify from 'ember-light-table/utils/css-styleify';\n\nconst {\n  Component,\n  computed\n} = Ember;\n\n/**\n * @module Light Table\n * @submodule Cell Types\n */\n\n/**\n * @module Cell Types\n * @class Base Cell\n */\n\nconst Cell = Component.extend({\n  layout,\n  tagName: 'td',\n  classNames: ['lt-cell'],\n  attributeBindings: ['style'],\n  classNameBindings: ['align', 'isSorted', 'column.cellClassNames'],\n\n  isSorted: computed.readOnly('column.sorted'),\n\n  style: computed('column.width', function() {\n    return cssStyleify(this.get('column').getProperties(['width']));\n  }),\n\n  align: computed('column.align', function() {\n    return `align-${this.get('column.align')}`;\n  }),\n\n  /**\n   * @property table\n   * @type {Table}\n   */\n  table: null,\n\n  /**\n   * @property column\n   * @type {Column}\n   */\n  column: null,\n\n  /**\n   * @property row\n   * @type {Row}\n   */\n  row: null,\n\n  /**\n   * @property tableActions\n   * @type {Object}\n   */\n  tableActions: null,\n\n  /**\n   * @property rawValue\n   * @type {Mixed}\n   */\n  rawValue: null,\n\n  /**\n   * @property value\n   * @type {Mixed}\n   */\n  value: computed('rawValue', function() {\n    let rawValue = this.get('rawValue');\n    let format = this.get('column.format');\n\n    if (format && typeof format === 'function') {\n      return format.call(this, rawValue);\n    }\n    return rawValue;\n  })\n});\n\nCell.reopenClass({\n  positionalParams: ['column', 'row']\n});\n\nexport default Cell;\n","/home/travis/build/npmtest/node-npmtest-ember-light-table/node_modules/ember-light-table/addon/components/columns/base.js":"import Ember from 'ember';\nimport layout from 'ember-light-table/templates/components/columns/base';\nimport DraggableColumnMixin from 'ember-light-table/mixins/draggable-column';\nimport cssStyleify from 'ember-light-table/utils/css-styleify';\n\nconst {\n  Component,\n  computed,\n  isEmpty\n} = Ember;\n\n/**\n * @module Light Table\n * @submodule Column Types\n */\n\n/**\n * @module Column Types\n * @class Base Column\n */\n\nconst Column = Component.extend(DraggableColumnMixin, {\n  layout,\n  tagName: 'th',\n  classNames: ['lt-column'],\n  attributeBindings: ['style', 'colspan', 'rowspan'],\n  classNameBindings: ['align', 'isGroupColumn:lt-group-column', 'isHideable', 'isSortable', 'isSorted', 'isResizable', 'isResizing', 'isDraggable', 'column.classNames'],\n\n  isGroupColumn: computed.readOnly('column.isGroupColumn'),\n  isSortable: computed.readOnly('column.sortable'),\n  isSorted: computed.readOnly('column.sorted'),\n  isHideable: computed.readOnly('column.hideable'),\n  isResizable: computed.readOnly('column.resizable'),\n  isDraggable: computed.readOnly('column.draggable'),\n  isResizing: false,\n\n  style: computed('column.width', function() {\n    return cssStyleify(this.get('column').getProperties(['width']));\n  }),\n\n  align: computed('column.align', function() {\n    return `align-${this.get('column.align')}`;\n  }),\n\n  /**\n   * @property label\n   * @type {String}\n   */\n  label: computed.oneWay('column.label'),\n\n  /**\n   * @property table\n   * @type {Table}\n   */\n  table: null,\n\n  /**\n   * @property column\n   * @type {Column}\n   */\n  column: null,\n\n  /**\n   * @property tableActions\n   * @type {Object}\n   */\n  tableActions: null,\n\n  /**\n   * @property sortIcons\n   * @type {Object}\n   */\n  sortIcons: null,\n\n  /**\n   * @property colspan\n   * @type {Number}\n   */\n  colspan: computed('column', 'column.visibleSubColumns.[]', function() {\n    let subColumns = this.get('column.visibleSubColumns');\n    return !isEmpty(subColumns) ? subColumns.length : 1;\n  }),\n\n  /**\n   * @property rowspan\n   * @type {Number}\n   */\n  rowspan: computed('column.visibleSubColumns.[]', function() {\n    let subColumns = this.get('column.visibleSubColumns');\n    return !isEmpty(subColumns) ? 1 : 2;\n  })\n});\n\nColumn.reopenClass({\n  positionalParams: ['column']\n});\n\nexport default Column;\n"}